{"version":3,"sources":["webpack://WakandaClient/webpack/universalModuleDefinition","webpack://WakandaClient/webpack/bootstrap","webpack://WakandaClient/./business/abstract-business.ts","webpack://WakandaClient/./business/catalog-business.ts","webpack://WakandaClient/./business/collection-business.ts","webpack://WakandaClient/./business/dataclass-business.ts","webpack://WakandaClient/./business/directory-business.ts","webpack://WakandaClient/./business/entity-business.ts","webpack://WakandaClient/./business/media-business.ts","webpack://WakandaClient/./business/method-adapter.ts","webpack://WakandaClient/./business/util.ts","webpack://WakandaClient/./const.ts","webpack://WakandaClient/./data-access/http/http-client.ts","webpack://WakandaClient/./data-access/http/http-response.ts","webpack://WakandaClient/./data-access/http/node-http-client.ts","webpack://WakandaClient/./data-access/service/abstract-service.ts","webpack://WakandaClient/./data-access/service/base/catalog-base-service.ts","webpack://WakandaClient/./data-access/service/base/collection-base-service.ts","webpack://WakandaClient/./data-access/service/base/dataclass-base-service.ts","webpack://WakandaClient/./data-access/service/base/directory-base-service.ts","webpack://WakandaClient/./data-access/service/base/entity-base-service.ts","webpack://WakandaClient/./data-access/service/base/media-base-service.ts","webpack://WakandaClient/./data-access/service/catalog-service.ts","webpack://WakandaClient/./data-access/service/collection-service.ts","webpack://WakandaClient/./data-access/service/dataclass-service.ts","webpack://WakandaClient/./data-access/service/directory-service.ts","webpack://WakandaClient/./data-access/service/entity-service.ts","webpack://WakandaClient/./data-access/service/media-service.ts","webpack://WakandaClient/./data-access/util.ts","webpack://WakandaClient/./node.ts","webpack://WakandaClient/./presentation/catalog.ts","webpack://WakandaClient/./presentation/collection.ts","webpack://WakandaClient/./presentation/dataclass.ts","webpack://WakandaClient/./presentation/entity.ts","webpack://WakandaClient/./presentation/media.ts","webpack://WakandaClient/./wakanda-client.ts","webpack://WakandaClient/external \"request\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AbstractBusiness","_a","wakJSC","this","default","abstract_business_1","catalog_service_1","catalog_1","dataclass_1","dataclass_business_1","CatalogBusiness","_super","obj","_this","service","__extends","needDataClass","dcName","seenDataClasses","indexOf","push","dataClasses","then","dataClassDBOArray","dcArray","_i","dataClassDBOArray_1","length","dcDBO","attributes","attr","kind","AttributeRelated","type","readOnly","simpleDate","undefined","Attribute","entityType_1","some","_dataClass","collectionName","attrCollection","AttributeCollection","entityType","Error","_b","methods","entity","collection","dataClass","_c","_d","method","applyTo","DataClass","dataURI","_decorateDataClass","catalog","_e","_f","collection_service_1","const_1","method_adapter_1","CollectionBusiness","dataClassBusiness","collectionUri","pageSize","initialSelect","_decorateCollection","fetch","nextPage","prevPage","more","_addUserDefinedMethods","options","opt","DEFAULT_PAGE_SIZE","select","collectionDBO","fresherCollection","_presentationCollectionFromDbo","dbo","_refreshCollection","_deferred","start","_first","_sent","__ENTITIES","entities","_presentationEntityFromDbo","self","forEach","params","Array","from","arguments","callMethod","methodName","parameters","MethodAdapter","transform","_dataClassBusinessMap","prop","entity_business_1","dataclass_service_1","collection_business_1","media_business_1","entity_1","collection_1","media_1","util_1","Map","DataClassBusiness","set","find","query","id","filter","orderBy","pojo","entityToAttach","_createEntity","deferred","business","_decorateEntity","_populateEntityDataFromDbo","_flashEntityValues","_createCollection","uri","_createMedia","isImage","attributeName","media","_decorateMedia","_stamp","__STAMP","dboAttribute","__deferred","wakParseSimpleDate","Date","__KEY","__ENTITYSET","_count","__COUNT","__FIRST","__SENT","_pageSize","dboEntity","directory_service_1","DirectoryBusiness","login","username","password","duration","durationTime","DEFAULT_SESSION_DURATION","catch","Promise","reject","logout","getCurrentUser","getCurrentUserBelongsTo","group","entity_service_1","EntityBusiness","save","delete","recompute","data","objAttr","_key","JSON","stringify","wakToStringSimpleDate","toJSON","_oldEntityValues","fresherEntity","_refreshEntity","prepareDataForSave","expand","_getExpandString","entityDbo","entityIsNew","oldData","slice","media_service_1","MediaBusiness","mediaBusiness","upload","file","dcBusinessMap","__entityModel","Util","stringDate","arr","split","UTC","parseInt","date","getUTCDate","getUTCMonth","getUTCFullYear","HttpClient","apiPrefix","prefix","_getRequestInterceptors","_postRequestInterceptors","_getResponseInterceptors","_postResponseInterceptors","res","interceptor","post","responseGet","requestUri","promise","responsePost","registerRequestInterceptor","callback","_interceptorTypeToArray","registerResponseInterceptor","interceptorType","_isValidInterceptorType","toLowerCase","isArray","HttpResponse","statusCode","headers","body","request","http_client_1","http_response_1","NodeHttpClient","cookieJar","jar","_clearCookie","resolve","e","result","_getWithoutInterceptor","url","qs","_httpResponseAdaptor","requestOptions","binary","Content-Type","form","error","response","statusMessage","AbstractService","httpClient","_httpClient","CatalogBaseService","strDataclasses","join","strCatalog","catalogContent","rawObj","parse","CollectionBaseService","isEntitySet","optString","handleOptions","removeRestInfoFromEntity","emMethod","isEntitySetUri","test","DataClassBaseService","_sanitizeOptionParams","map","element","toISOString","DirectoryBaseService","ID","EntityBaseService","expandStr","entityKey","ok","MediaBaseService","_buildUri","entityStamp","abstract_service_1","catalog_base_service_1","CatalogService","collection_base_service_1","CollectionService","dataclass_base_service_1","DataClassService","directory_base_service_1","DirectoryService","entity_base_service_1","EntityService","media_base_service_1","MediaService","dataClassName","mimeType","ret","params_1","elt","isInteger","replace","isNaN","wakanda_client_1","WakandaClient","node_http_client_1","Catalog","dataClasses_1","dc","Collection","configurable","writable","Entity","Media","catalog_business_1","directory_business_1","packageOptions","host","directoryBusiness","directory","helper","isEntity","isCollection","getCatalog","version","require"],"mappings":"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","file":"node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WakandaClient\"] = factory();\n\telse\n\t\troot[\"WakandaClient\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import WakandaClient from '../wakanda-client';\n\nabstract class AbstractBusiness {\n\n  public wakJSC: WakandaClient;\n\n  constructor({wakJSC}: {wakJSC: WakandaClient}) {\n    this.wakJSC = wakJSC;\n  }\n}\n\nexport default AbstractBusiness;\n","import AbstractBusiness from './abstract-business';\nimport CatalogService from '../data-access/service/catalog-service';\nimport Catalog from '../presentation/catalog';\nimport {DataClass, Attribute, AttributeRelated, AttributeCollection} from '../presentation/dataclass';\nimport DataClassBusiness from './dataclass-business';\n\nexport interface IDataClassDBO {\n  name: string;\n  collectionName: string;\n  dataURI: string;\n  attributes: {\n    name: string,\n    type: string,\n    kind: string,\n    readOnly: boolean,\n    simpleDate: boolean\n  }[];\n  methods: {\n    name: string,\n    applyTo: string\n  }[];\n}\n\nclass CatalogBusiness extends AbstractBusiness {\n\n  private service: CatalogService;\n  private seenDataClasses: string[];\n\n  constructor(obj: any) {\n    super(obj);\n\n    this.service = new CatalogService({\n      wakJSC: this.wakJSC\n    });\n  }\n\n  private needDataClass(dcName: string) {\n    if (this.seenDataClasses.indexOf(dcName) === -1) {\n      this.seenDataClasses.push(dcName);\n    }\n  }\n\n  public get(dataClasses?: string[]): Promise<Catalog> {\n\n    this.seenDataClasses = [];\n\n    return this.service.get(dataClasses).then((dataClassDBOArray: IDataClassDBO[]) => {\n\n      let dcArray: DataClass[] = [];\n\n      for (let dcDBO of dataClassDBOArray) {\n        let attributes: Attribute[] = [];\n\n        for (let attr of dcDBO.attributes) {\n          switch (attr.kind) {\n            case 'relatedEntity':\n              attributes.push(new AttributeRelated({\n                name: attr.name,\n                type: attr.type,\n                kind: attr.kind\n              }));\n              this.needDataClass(attr.type);\n              break;\n            case 'storage':\n            case 'calculated':\n            case 'alias':\n              let readOnly = attr.readOnly || (attr.type === 'image' || attr.type === 'blob');\n              let simpleDate = attr.simpleDate !== undefined ? attr.simpleDate : undefined;\n              attributes.push(new Attribute({\n                name: attr.name,\n                type: attr.type,\n                readOnly,\n                kind: attr.kind,\n                simpleDate: simpleDate\n              }));\n              break;\n            case 'relatedEntities':\n              let entityType: string;\n              dataClassDBOArray.some((_dataClass) => {\n                if (_dataClass.collectionName === attr.type) {\n                  entityType = _dataClass.name;\n                  return true;\n                }\n              });\n              let attrCollection = new AttributeCollection({\n                name: attr.name,\n                type: attr.type,\n                kind: attr.kind,\n                entityType: entityType\n              });\n              attributes.push(attrCollection);\n              this.needDataClass(attrCollection.entityType);\n              break;\n            default:\n              throw new Error('[WakandaClient] Unhandled ' + attr.kind + ' attribute type');\n          }\n        }\n\n        let methods: {\n          entity: string[],\n          collection: string[],\n          dataClass: string[]\n        } = {\n          entity: [],\n          collection: [],\n          dataClass: []\n        };\n\n        for (let method of dcDBO.methods) {\n          switch (method.applyTo) {\n            case 'entity':\n              methods.entity.push(method.name);\n              break;\n            case 'entityCollection':\n              methods.collection.push(method.name);\n              break;\n            case 'dataClass':\n              methods.dataClass.push(method.name);\n              break;\n            default:\n              throw new Error('[WakandaClient] Unrecognized ' + method.applyTo + ' method type');\n          }\n        }\n\n        let dataClass = new DataClass({\n          name: dcDBO.name,\n          collectionName: dcDBO.collectionName,\n          attributes,\n          methods\n        });\n\n        //Binding framework methods to the dataclass\n        let dataClassBusiness = new DataClassBusiness({\n          wakJSC: this.wakJSC,\n          dataClass,\n          methods,\n          dataURI: dcDBO.dataURI\n        });\n        dataClassBusiness._decorateDataClass();\n\n        dcArray.push(dataClass);\n      }\n\n      let catalog = new Catalog({\n        dataClasses: dcArray\n      });\n\n      //Check if we have all needed dataClasses on the catalog\n      for (let dcName of this.seenDataClasses) {\n        if (!catalog[dcName]) {\n          throw new Error('Needed ' + dcName + ' dataClass is not present on catalog');\n        }\n      }\n\n      return catalog;\n    });\n  }\n}\n\nexport default CatalogBusiness;\n","import AbstractBusiness from './abstract-business';\nimport CollectionService from '../data-access/service/collection-service';\nimport Const from '../const';\nimport {IEntityDBO} from './entity-business';\nimport Collection from '../presentation/collection';\nimport {DataClass} from '../presentation/dataclass';\nimport DataClassBusiness from './dataclass-business';\nimport {QueryOption} from '../presentation/query-option';\nimport {MethodAdapter} from './method-adapter';\nimport WakandaClient from '../wakanda-client';\n\nexport interface ICollectionDBO {\n  __ENTITYSET: string;\n  __COUNT: number;\n  __FIRST: number;\n  __SENT: number;\n  __ENTITIES: IEntityDBO[];\n  __deferred: {uri: string};\n\n  [key: string]: any;\n}\n\nexport interface ICollectionBusinessConstructor {\n  wakJSC: WakandaClient;\n  dataClass: DataClass;\n  collection: Collection;\n  dataClassBusiness: DataClassBusiness;\n  collectionUri: string;\n  pageSize: number;\n  initialSelect: string;\n}\n\nclass CollectionBusiness extends AbstractBusiness {\n\n  private collection: Collection;\n  private dataClass: DataClass;\n  private dataClassBusiness: DataClassBusiness;\n  private service: CollectionService;\n  private pageSize: number;\n  private initialSelect: string;\n\n  constructor({wakJSC, dataClass, collection, dataClassBusiness, collectionUri, pageSize, initialSelect}: ICollectionBusinessConstructor) {\n    super({wakJSC});\n\n    this.collection = collection;\n    this.dataClass = dataClass;\n    this.dataClassBusiness = dataClassBusiness;\n    this.service = new CollectionService({\n      wakJSC,\n      collection,\n      dataClassBusiness,\n      collectionUri\n    });\n    this.pageSize = pageSize;\n    this.initialSelect = initialSelect;\n  }\n\n  public _decorateCollection() {\n    this.collection.fetch = this.fetch.bind(this);\n    this.collection.nextPage = this.nextPage.bind(this);\n    this.collection.prevPage = this.prevPage.bind(this);\n    this.collection.more = this.more.bind(this);\n\n    this._addUserDefinedMethods();\n  }\n\n  public fetch(options?: QueryOption): Promise<Collection> {\n    let opt = options || {};\n\n    if (opt.method && opt.method.length > 0) {\n      throw new Error('Collection.fetch: option method is not allowed');\n    }\n\n    if (!opt.pageSize) {\n      opt.pageSize = this.pageSize ? this.pageSize : Const.DEFAULT_PAGE_SIZE;\n    }\n\n    if (opt.select) {\n      this.initialSelect = opt.select;\n    }\n\n    this.pageSize = opt.pageSize;\n\n    return this.service.fetch(opt).then(collectionDBO => {\n      let fresherCollection = this.dataClassBusiness._presentationCollectionFromDbo({\n        dbo: collectionDBO,\n        pageSize: this.pageSize\n      });\n\n      this._refreshCollection({fresherCollection});\n      return this.collection;\n    });\n  }\n\n  public more(): Promise<Collection> {\n\n    if (this.collection._deferred === true) {\n      throw new Error('Collection.more: can not call more on a deferred collection');\n    }\n\n    let options: QueryOption = {\n      start: this.collection._first + this.collection._sent,\n      pageSize: this.pageSize\n    };\n\n    if (this.initialSelect) {\n      options.select = this.initialSelect;\n    }\n\n    return this.service.fetch(options)\n      .then(dbo => {\n        this.collection._sent += dbo.__ENTITIES.length;\n\n        for (let entity of dbo.__ENTITIES) {\n          this.collection.entities.push(this.dataClassBusiness._presentationEntityFromDbo({\n            dbo: entity\n          }));\n        }\n\n        return this.collection;\n      });\n  }\n\n  public nextPage(): Promise<Collection> {\n\n    if (this.collection._deferred === true) {\n      throw new Error('Collection.nextPage: can not call nextPage on a deferred collection');\n    }\n\n    let options: QueryOption = {\n      start: this.collection._first + this.pageSize,\n      pageSize: this.pageSize\n    };\n\n    if (this.initialSelect) {\n      options.select = this.initialSelect;\n    }\n\n    return this.fetch(options);\n  }\n\n  public prevPage(): Promise<Collection> {\n\n    if (this.collection._deferred === true) {\n      throw new Error('Collection.prevPage: can not call prevPage on a deferred collection');\n    }\n\n    let options: QueryOption = {\n      start: this.collection._first - this.pageSize,\n      pageSize: this.pageSize\n    };\n\n    if (this.initialSelect) {\n      options.select = this.initialSelect;\n    }\n\n    return this.fetch(options);\n  }\n\n  private _addUserDefinedMethods() {\n    let self = this;\n    this.dataClassBusiness.methods.collection.forEach(method => {\n      //Voluntary don't use fat arrow notation to use arguments object without a bug\n      this.collection[method] = function() {\n        let params = Array.from(arguments);\n        return self.callMethod(method, params);\n      };\n    });\n  }\n\n  public callMethod(methodName: string, parameters: any[]) {\n    if (this.collection._deferred) {\n      throw new Error('Collection.' + methodName + ': can not be called on a deferred collection');\n    }\n\n    return this.service.callMethod(methodName, parameters)\n      .then((obj: any) => {\n        return MethodAdapter.transform(obj, this.dataClassBusiness._dataClassBusinessMap);\n      });\n  }\n\n  private _refreshCollection({fresherCollection}: {fresherCollection: Collection}) {\n    for (let prop in fresherCollection) {\n      if (Object.prototype.hasOwnProperty.call(fresherCollection, prop)) {\n        if (typeof fresherCollection[prop] !== 'function') {\n          this.collection[prop] = fresherCollection[prop];\n        }\n      }\n    }\n  }\n}\n\nexport default CollectionBusiness;\n","import AbstractBusiness from './abstract-business';\nimport EntityBusiness from './entity-business';\nimport DataClassService from '../data-access/service/dataclass-service';\nimport CollectionBusiness from './collection-business';\nimport MediaBusiness from './media-business';\nimport Entity from '../presentation/entity';\nimport Collection from '../presentation/collection';\nimport {AttributeRelated, AttributeCollection} from '../presentation/dataclass';\nimport Media from '../presentation/media';\nimport Const from '../const';\nimport {ICollectionDBO} from './collection-business';\nimport {DataClass} from '../presentation/dataclass';\nimport {QueryOption} from '../presentation/query-option';\nimport {IEntityDBO} from './entity-business';\nimport {MethodAdapter} from './method-adapter';\nimport WakandaClient from '../wakanda-client';\nimport Util from './util';\n\n\n//This map stores all DataClassBusiness instances of existing dataClasses\nlet _dataClassBusinessMap = new Map<string, DataClassBusiness>();\n\nexport interface IMethodsArray {\n  entity: string[];\n  collection: string[];\n  dataClass: string[];\n}\n\nclass DataClassBusiness extends AbstractBusiness {\n\n  public dataClass: DataClass;\n  public methods: IMethodsArray;\n  public _dataClassBusinessMap: Map<string, DataClassBusiness>;\n  public dataURI: string;\n\n  private service: DataClassService;\n\n  constructor({wakJSC, dataClass, methods, dataURI}:\n  {wakJSC: WakandaClient, dataClass: DataClass, methods: IMethodsArray, dataURI: string}) {\n    super({wakJSC});\n\n    this.dataClass = dataClass;\n    this.methods = methods;\n    this.service = new DataClassService({\n      wakJSC: this.wakJSC,\n      dataClassBusiness: this\n    });\n    this.dataURI = dataURI;\n\n    _dataClassBusinessMap.set(dataClass.name, this);\n    this._dataClassBusinessMap = _dataClassBusinessMap;\n  }\n\n  public _decorateDataClass() {\n    //Do not forget to bind(this) to have \"this\" pointing on business instance\n    //instead of given dataclass instance\n    this.dataClass.find    = this.find.bind(this);\n    this.dataClass.query   = this.query.bind(this);\n    this.dataClass.create  = this.create.bind(this);\n\n    this._addUserDefinedMethods();\n  }\n\n  private _addUserDefinedMethods() {\n    let self = this;\n\n    this.methods.dataClass.forEach(method => {\n      //Voluntary don't use fat arrow notation to use arguments object without a bug\n      this.dataClass[method] = function() {\n        let params = Array.from(arguments);\n        return self.callMethod(method, params);\n      };\n    });\n  }\n\n  public callMethod(methodName: string, parameters: any[]): Promise<Entity|Collection|any> {\n    return this.service.callMethod(methodName, parameters)\n      .then(obj => {\n        return MethodAdapter.transform(obj, this._dataClassBusinessMap);\n      });\n  }\n\n  public find(id: string|number, options?: QueryOption): Promise<Entity> {\n    let opt = options || {};\n\n    if (opt.filter !== undefined || opt.params !== undefined || opt.pageSize !== undefined ||\n      opt.start !== undefined || opt.orderBy !== undefined) {\n      throw new Error('Dataclass.find: options filter, params, pageSize, start and orderBy are not allowed');\n    }\n\n    return this.service.find(id, opt).then(entity => {\n      return this._presentationEntityFromDbo({\n        dbo: entity\n      });\n    });\n  }\n\n  public query(options?: QueryOption): Promise<Collection> {\n    let opt = options || {};\n    let initialSelect = opt.select;\n\n    if (opt.method && opt.method.length > 0) {\n      throw new Error('Dataclass.query: option method is not allowed');\n    }\n\n    if (!opt.pageSize) {\n      opt.pageSize = Const.DEFAULT_PAGE_SIZE;\n    }\n\n    return this.service.query(opt).then(collection => {\n      return this._presentationCollectionFromDbo({\n        dbo: collection,\n        pageSize: opt.pageSize,\n        initialSelect\n      });\n    });\n  }\n\n  public create(pojo?: any): Entity {\n    let entityToAttach: any = {};\n\n    if (pojo) {\n      for (let prop in pojo) {\n        if (pojo[prop] instanceof Entity) {\n          entityToAttach[prop] = pojo[prop];\n          delete pojo[prop];\n        }\n      }\n    }\n\n    let entity = this._presentationEntityFromDbo({\n      dbo: pojo || {}\n    });\n\n    for (let prop in entityToAttach) {\n      if (Object.prototype.hasOwnProperty.call(entityToAttach, prop)) {\n        entity[prop] = entityToAttach[prop];\n      }\n    }\n\n    return entity;\n  }\n\n  private _createEntity({key, deferred, dbo}: {key: string, deferred?: boolean, dbo?: IEntityDBO}): Entity {\n\n    let entity = new Entity({\n      key,\n      deferred,\n      dataClass: this.dataClass\n    });\n    let business = new EntityBusiness({\n      wakJSC: this.wakJSC,\n      dataClass: this.dataClass,\n      entity,\n      dataClassBusiness: this\n    });\n    business._decorateEntity();\n\n    if (!deferred) {\n      this._populateEntityDataFromDbo({\n        dbo: dbo,\n        entity: entity\n      });\n      business._flashEntityValues();\n    }\n    return entity;\n  }\n\n  private _createCollection({uri, deferred, pageSize, initialSelect}:\n    {uri: string, deferred?: boolean, pageSize?: number, initialSelect?: string}): Collection {\n\n    let collection = new Collection({\n        deferred: deferred,\n        dataClass: this.dataClass\n      });\n    let business = new CollectionBusiness({\n      wakJSC: this.wakJSC,\n      dataClass: this.dataClass,\n      dataClassBusiness: this,\n      collection,\n      collectionUri: uri,\n      pageSize,\n      initialSelect\n    });\n    business._decorateCollection();\n\n    return collection;\n  }\n\n  public _createMedia({uri, isImage, attributeName, entity}:\n   {uri: string, isImage: boolean, attributeName: string, entity: Entity}): Media {\n\n    let media = new Media({uri});\n    let business = new MediaBusiness({\n      wakJSC: this.wakJSC,\n      media,\n      dataClassBusiness: this,\n      isImage,\n      attributeName,\n      entity\n    });\n\n    business._decorateMedia();\n\n    return media;\n  }\n\n  private _populateEntityDataFromDbo({dbo, entity}: {dbo: IEntityDBO, entity: Entity}): Entity {\n      entity._stamp = dbo.__STAMP;\n      for (let attr of this.dataClass.attributes) {\n\n        let dboAttribute = dbo[attr.name];\n\n        if (dboAttribute !== null && dboAttribute !== undefined) {\n          if (attr instanceof AttributeRelated) {\n            //Kind of recursive call with a potententialy different instance of\n            //DataClassBusiness\n            let business = _dataClassBusinessMap.get(attr.type);\n            entity[attr.name] = business._presentationEntityFromDbo({\n              dbo: dboAttribute\n            });\n          }\n          else if (attr instanceof AttributeCollection) {\n            let business = _dataClassBusinessMap.get(attr.entityType);\n            entity[attr.name] = business._presentationCollectionFromDbo({\n              dbo: dboAttribute\n            });\n          }\n          else if (attr.type === 'image' || attr.type === 'blob') {\n            let uri: string;\n\n            if (dboAttribute && dboAttribute.__deferred && dboAttribute.__deferred.uri) {\n              uri = dboAttribute.__deferred.uri;\n            }\n            else {\n              uri = null;\n            }\n            entity[attr.name] = this._createMedia({\n              uri,\n              isImage: attr.type === 'image',\n              attributeName: attr.name,\n              entity\n            });\n          }\n          else if (attr.type === 'date') {\n            if (!dboAttribute) {\n              entity[attr.name] = null;\n            } else {\n              entity[attr.name] = attr.simpleDate ? Util.wakParseSimpleDate(dboAttribute) : new Date(dboAttribute);\n            }\n          }\n          else {\n            entity[attr.name] = dboAttribute;\n          }\n        }\n        else {\n          //Even if the property is null, we need a media for this kind of attributes\n          //to handle the upload part\n          if (attr.type === 'image' || attr.type === 'blob') {\n            entity[attr.name] = this._createMedia({\n              uri: null,\n              isImage: attr.type === 'image',\n              attributeName: attr.name,\n              entity\n            });\n          }\n          else {\n            entity[attr.name] = null;\n          }\n        }\n      }\n      return entity;\n  }\n\n  public _presentationEntityFromDbo({dbo}: {dbo: IEntityDBO}): Entity {\n    let entity: Entity;\n\n    if (!dbo) {\n      entity = null;\n    }\n    if (dbo.__deferred) {\n      entity = this._createEntity({\n        key: dbo.__deferred.__KEY,\n        deferred: true\n      });\n    }\n    else {\n      entity = this._createEntity({\n        key: dbo.__KEY,\n        dbo: dbo\n      });\n    }\n\n    return entity;\n  }\n\n  public _presentationCollectionFromDbo({dbo, pageSize, initialSelect}:\n    {dbo: ICollectionDBO, pageSize?: number, initialSelect?: string}): Collection {\n\n    let collection: Collection;\n\n    if (!dbo) {\n      collection = null;\n    }\n    else if (dbo.__deferred) {\n      collection = this._createCollection({\n        deferred: true,\n        uri: dbo.__deferred.uri\n      });\n    }\n    else {\n      collection = this._createCollection({\n        uri: dbo.__ENTITYSET,\n        pageSize: pageSize || dbo.__ENTITIES.length,\n        initialSelect\n      });\n      collection._count     = dbo.__COUNT;\n      collection._first     = dbo.__FIRST;\n      collection._sent      = dbo.__SENT;\n      collection._pageSize  = pageSize;\n\n      for (let dboEntity of dbo.__ENTITIES) {\n        collection.entities.push(this._presentationEntityFromDbo({\n          dbo: dboEntity\n        }));\n      }\n    }\n\n    return collection;\n  }\n}\n\nexport default DataClassBusiness;\n","import WakandaClient from '../wakanda-client';\nimport AbstractBusiness from './abstract-business';\nimport DirectoryService from '../data-access/service/directory-service';\nimport Const from '../const';\n\nexport interface ICurrentUserDBO {\n  userName: string;\n  fullName: string;\n  ID: string|number;\n}\n\nclass DirectoryBusiness extends AbstractBusiness {\n\n  private service: DirectoryService;\n\n  constructor({wakJSC}: {wakJSC: WakandaClient}) {\n    super({wakJSC});\n\n    this.service = new DirectoryService({wakJSC});\n  }\n\n  public login(username: string, password: string, duration?: number): Promise<boolean> {\n\n    let durationTime = duration || Const.DEFAULT_SESSION_DURATION;\n\n    if (!(typeof durationTime === 'number') || durationTime <= 0) {\n      throw new Error('Directory.login: invalid duration parameter');\n    }\n\n    return this.service.login(username, password, durationTime)\n      .catch(() => {\n        return Promise.reject(new Error('Directory.login: Unauthorized'));\n      });\n  }\n\n  public logout(): Promise<boolean> {\n    return this.service.logout()\n      .catch(() => {\n        return Promise.reject(new Error('Directory.logout: logout failed'));\n      });\n  }\n\n  public getCurrentUser(): Promise<ICurrentUserDBO> {\n    return this.service.getCurrentUser()\n      .then(dbo => {\n        return dbo;\n      })\n      .catch(() => {\n        return Promise.reject(new Error('Directory.getCurrentUser: user is not logged in'));\n      });\n  }\n\n  public getCurrentUserBelongsTo(group: string): Promise<boolean> {\n\n    if (!(typeof group === 'string')) {\n      throw new Error('Directory.getCurrentUserBelongsTo: group must be a string');\n    }\n\n    return this.service.getCurrentUserBelongsTo(group)\n      .then(() => {\n        return true;\n      })\n      .catch(() => {\n        return false;\n      });\n  }\n}\n\nexport default DirectoryBusiness;\n","import AbstractBusiness from './abstract-business';\nimport EntityService from '../data-access/service/entity-service';\nimport {AttributeRelated, AttributeCollection} from '../presentation/dataclass';\nimport Entity from '../presentation/entity';\nimport {DataClass} from '../presentation/dataclass';\nimport DataClassBusiness from './dataclass-business';\nimport {QueryOption} from '../presentation/query-option';\nimport {MethodAdapter} from './method-adapter';\nimport WakandaClient from '../wakanda-client';\nimport Media from '../presentation/media';\nimport Util from './util';\n\n\nexport interface IEntityDBO {\n  __KEY?: string;\n  __STAMP?: number;\n  __deferred?: {uri: string, __KEY: string};\n\n  [key: string]: any;\n}\n\nclass EntityBusiness extends AbstractBusiness {\n\n  private entity: Entity;\n  private dataClass: DataClass;\n  private dataClassBusiness: DataClassBusiness;\n  private service: EntityService;\n  private _oldEntityValues: IEntityDBO;\n\n  constructor({wakJSC, entity, dataClass, dataClassBusiness}:\n  {wakJSC: WakandaClient, entity: Entity, dataClass: DataClass, dataClassBusiness: DataClassBusiness}) {\n    super({wakJSC});\n\n    this.entity = entity;\n    this.dataClass = dataClass;\n    this.dataClassBusiness = dataClassBusiness;\n    this.service = new EntityService({\n      wakJSC,\n      entity,\n      dataClassBusiness\n    });\n  }\n\n  public _decorateEntity() {\n    this.entity.save        = this.save.bind(this);\n    this.entity.delete      = this.delete.bind(this);\n    this.entity.fetch       = this.fetch.bind(this);\n    this.entity.recompute   = this.recompute.bind(this);\n\n    this._addUserDefinedMethods();\n  }\n\n  public _flashEntityValues(): void {\n    let data: IEntityDBO = {};\n    let entity = this.entity;\n\n    for (let attr of this.dataClass.attributes) {\n      let objAttr = entity[attr.name];\n\n      if (attr instanceof AttributeCollection) {\n        continue;\n      }\n\n      if (attr instanceof AttributeRelated) {\n        data[attr.name] = objAttr ? objAttr._key : null;\n      } else {\n        switch (attr.type) {\n          case 'image':\n          case 'blob':\n            data[attr.name] = { uri: objAttr.uri };\n            break;\n          case 'object':\n            data[attr.name] = JSON.stringify(objAttr);\n            break;\n          case 'date':\n            if (!objAttr) {\n              data[attr.name] = null;\n            } else {\n              data[attr.name] = attr.simpleDate ? Util.wakToStringSimpleDate(objAttr) : objAttr.toJSON();\n            }\n            break;\n          default:\n            data[attr.name] = objAttr;\n        }\n      }\n    }\n\n    this._oldEntityValues = data;\n  }\n\n  private _addUserDefinedMethods() {\n    let self = this;\n    this.dataClassBusiness.methods.entity.forEach(method => {\n      //Voluntary don't use fat arrow notation to use arguments object without a bug\n      this.entity[method] = function() {\n        let params = Array.from(arguments);\n        return self.callMethod(method, params);\n      };\n    });\n  }\n\n  public fetch(options?: QueryOption): Promise<Entity> {\n    let opt = options || {};\n\n    if (opt.filter !== undefined || opt.params !== undefined || opt.pageSize !== undefined ||\n      opt.start !== undefined || opt.orderBy !== undefined) {\n      throw new Error('Entity.fetch: options filter, params, pageSize, start and orderBy are not allowed');\n    }\n\n    return this.dataClassBusiness.find(this.entity._key, options).then(fresherEntity => {\n      this._refreshEntity({fresherEntity});\n      this._flashEntityValues();\n      return this.entity;\n    });\n  }\n\n  public callMethod(methodName: string, parameters: any[]): Promise<any> {\n    if (!this.entity._key) {\n      throw new Error('Entity.' + methodName + ': can not be called on an unsaved entity');\n    }\n\n    return this.service.callMethod(methodName, parameters)\n    .then(obj => {\n\n      return MethodAdapter.transform(obj, this.dataClassBusiness._dataClassBusinessMap);\n    });\n  }\n\n  public delete(): Promise<void> {\n    if (!this.entity._key) {\n      throw new Error('Entity.delete: can not delete unsaved entity');\n    }\n\n    return this.service.delete().then(() => {\n      this.entity = null;\n    });\n  }\n\n  public save(): Promise<Entity> {\n    let data = this.prepareDataForSave();\n\n    //If first-level related entities were already expanded, we will save the\n    //entity and ask the server to expand theses attributes on its response\n    //So, the user keeps its entities expanded\n    let expand = this._getExpandString();\n\n    return this.service.save(data, expand).then(entityDbo => {\n      let fresherEntity = this.dataClassBusiness._presentationEntityFromDbo({\n        dbo: entityDbo\n      });\n\n      this._refreshEntity({fresherEntity});\n      this._flashEntityValues();\n      return this.entity;\n    });\n  }\n\n  public recompute(): Promise<Entity> {\n    let data = this.prepareDataForSave();\n\n    return this.service.recompute(data)\n      .then(dbo => {\n        let fresherEntity = this.dataClassBusiness._presentationEntityFromDbo({\n          dbo\n        });\n\n        this._refreshEntity({fresherEntity});\n        return this.entity;\n      });\n  }\n\n  private prepareDataForSave(): IEntityDBO {\n    let data: IEntityDBO = {};\n    let entityIsNew = false;\n\n    if (this.entity._key && this.entity._stamp) {\n      data.__KEY   = this.entity._key;\n      data.__STAMP = this.entity._stamp;\n    }\n    else {\n      entityIsNew = true;\n    }\n\n    for (let attr of this.dataClass.attributes) {\n      let objAttr = this.entity[attr.name];\n\n      if (objAttr === undefined) {\n        objAttr = null;\n      }\n\n      if (attr instanceof AttributeRelated) {\n        data[attr.name] = objAttr ? objAttr._key : null;\n      }\n      else if (attr.readOnly) {\n        continue;\n      }\n      else if (attr.type === 'date') {\n        if (! objAttr) {\n          data[attr.name] = objAttr;\n        } else {\n          data[attr.name] = attr.simpleDate ? Util.wakToStringSimpleDate(objAttr) : objAttr.toJSON();\n        }\n      }\n      else if (!(attr instanceof AttributeCollection)) {\n        //Don't send null value for a newly created attribute (to don't override value eventually set on init event)\n        //except for ID (which is null), because if an empty object is send, save is ignored\n        if (!entityIsNew || objAttr !== null || attr.name === 'ID') {\n          data[attr.name] = objAttr;\n        }\n      }\n    }\n\n    if (!entityIsNew) {\n      let oldData = this._oldEntityValues || {};\n      for (let attr of this.dataClass.attributes) {\n        if (data[attr.name] === undefined || attr.name === 'ID') {\n          continue;\n        }\n\n        switch (attr.type) {\n          case 'image':\n          case 'blob':\n            if (data[attr.name].uri === oldData[attr.name].uri) {\n              delete data[attr.name];\n            }\n            break;\n          case 'object':\n            if (JSON.stringify(data[attr.name]) === oldData[attr.name]) {\n              delete data[attr.name];\n            }\n            break;\n          default:\n            if (data[attr.name] === oldData[attr.name]) {\n              delete data[attr.name];\n            }\n        }\n      }\n    }\n\n    return data;\n  }\n\n  private _refreshEntity({fresherEntity}: {fresherEntity: Entity}) {\n    for (let prop in fresherEntity) {\n      if (fresherEntity.hasOwnProperty(prop) && (typeof fresherEntity[prop] !== 'function')) {\n        if (fresherEntity[prop] instanceof Media) {\n          this.entity[prop].uri = fresherEntity[prop].uri;\n        } else {\n          this.entity[prop] = fresherEntity[prop];\n        }\n      }\n    }\n  }\n\n  private _getExpandString(): string {\n    let expand = '';\n    for (let attr of this.dataClass.attributes) {\n      if (attr instanceof AttributeRelated || attr instanceof AttributeCollection) {\n        if (this.entity[attr.name] instanceof Entity && !this.entity[attr.name]._deferred) {\n          expand += attr.name + ',';\n        }\n      }\n    }\n\n    return expand.length > 0 ? expand.slice(0, -1) : null;\n  }\n}\n\nexport default EntityBusiness;\n","import AbstractBusiness from './abstract-business';\nimport MediaService from '../data-access/service/media-service';\nimport Media from '../presentation/media';\nimport Entity from '../presentation/entity';\nimport DataClassBusiness from './dataclass-business';\nimport WakandaClient from '../wakanda-client';\n\nclass MediaBusiness extends AbstractBusiness {\n\n  public entity: Entity;\n  public isImage: boolean;\n\n  private media: Media;\n  private dataClassBusiness: DataClassBusiness;\n  private service: MediaService;\n\n  constructor({wakJSC, media, dataClassBusiness, isImage, attributeName, entity}:\n  {wakJSC: WakandaClient, media: Media, dataClassBusiness: DataClassBusiness, isImage: boolean, attributeName: string, entity: Entity}) {\n    super({wakJSC});\n\n    this.media = media;\n    this.entity = entity;\n    this.dataClassBusiness = dataClassBusiness;\n    this.isImage = isImage === true;\n    this.service = new MediaService({\n      wakJSC,\n      mediaBusiness: this,\n      media,\n      attributeName,\n      dataClassBusiness\n    });\n  }\n\n  public _decorateMedia() {\n    this.media.upload = this.upload.bind(this);\n    this.media.delete = this.delete.bind(this);\n  }\n\n  public upload(file: any): Promise<Entity> {\n\n    if (!this.entity._key) {\n      throw new Error('Media.upload: entity must be saved before uploading a media');\n    }\n\n    return this.service.upload(file, file.type).then(dbo => {\n      return dbo; //FIXME\n    }).then(() => {\n      //FIXME - crappy, force a refresh of the entity to get proper stamp and media uri\n      return this.entity.fetch();\n    });\n  }\n\n  public delete(): Promise<Entity> {\n\n    if (!this.entity._key) {\n      throw new Error('Media.upload: entity must be saved before deleting a media');\n    }\n\n    return this.service.delete().then(() => {\n      //FIXME - crappy, force a refresh of the entity to get proper stamp and media uri\n      return this.entity.fetch();\n    });\n  }\n}\n\nexport default MediaBusiness;\n","import DataClassBusiness from './dataclass-business';\n\nexport class MethodAdapter {\n\n  public static transform(object: any, dcBusinessMap: Map<string, DataClassBusiness>): any {\n    if (object && object.__entityModel) {\n      let business = dcBusinessMap.get(object.__entityModel);\n\n      if (business) {\n        //Returned object is a collection\n        if (typeof object.__COUNT !== 'undefined' &&\n            typeof object.__ENTITIES !== 'undefined' &&\n            typeof object.__FIRST !== 'undefined' &&\n            typeof object.__SENT !== 'undefined') {\n          return business._presentationCollectionFromDbo({\n            dbo: object\n          });\n        }\n        //Returned object is an entity\n        else if (object.__KEY && object.__STAMP) {\n          return business._presentationEntityFromDbo({\n            dbo: object\n          });\n        }\n      }\n    }\n\n    return object;\n  }\n}\n","class Util {\n\n  public static wakParseSimpleDate(stringDate: string): Date {\n    // In wakanda, simple date is a date with only year, month and hour\n    // in this format : DD!MM!YYYY\n    if (!stringDate) {\n      return null;\n    }\n\n    let arr = stringDate.split('!');\n    if (arr.length !== 3) {\n      // return null or throw an error, simple date format is ko\n      return null;\n    }\n    let date: Date = new Date(Date.UTC(parseInt(arr[2], 10), parseInt(arr[1], 10) - 1, parseInt(arr[0], 10)));\n    return date;\n  }\n\n  public static wakToStringSimpleDate(date: Date): String {\n    let wakSimpleDate: String;\n\n    if (!(date instanceof Date)) {\n      return null;\n    }\n\n    wakSimpleDate = date.getUTCDate() + '!' + (date.getUTCMonth() + 1) + '!' + date.getUTCFullYear();\n    return wakSimpleDate;\n  }\n}\n\nexport default Util;\n","export default {\n  DEFAULT_PAGE_SIZE: 40,\n  DEFAULT_SESSION_DURATION: 3600 //seconds\n};\n","import HttpResponse from './http-response';\n\nexport interface IRequestOption {\n  uri: string;\n}\n\nexport interface IGetRequestOption extends IRequestOption {\n  params?: any;\n}\n\nexport interface IPostRequestOption extends IRequestOption {\n  data?: any;\n  binary?: boolean;\n}\n\nexport type RequestInterceptor<T extends IRequestOption> = (options: T) => any;\nexport type ResponseInterceptor = (requestUri: string, promise: Promise<HttpResponse>) => Promise<HttpResponse>;\n\nexport abstract class HttpClient {\n\n  public prefix: string;\n\n  private _getRequestInterceptors: RequestInterceptor<IGetRequestOption>[];\n  private _postRequestInterceptors: RequestInterceptor<IPostRequestOption>[];\n  private _getResponseInterceptors: ResponseInterceptor[];\n  private _postResponseInterceptors: ResponseInterceptor[];\n\n  constructor({apiPrefix}: {apiPrefix: string}) {\n    this.prefix = apiPrefix;\n\n    this._getRequestInterceptors = [];\n    this._postRequestInterceptors = [];\n    this._getResponseInterceptors = [];\n    this._postResponseInterceptors = [];\n  }\n\n  public get(options: IGetRequestOption): Promise<HttpResponse> {\n    for (let i = 0; i < this._getRequestInterceptors.length; i++) {\n      let interceptor = this._getRequestInterceptors[i];\n      let res = interceptor(options);\n\n      if (res !== null && (typeof res !== 'undefined')) {\n        return res;\n      }\n    }\n\n    return null;\n  }\n\n  public post(options: IPostRequestOption): Promise<HttpResponse> {\n    for (let i = 0; i < this._postRequestInterceptors.length; i++) {\n      let interceptor = this._postRequestInterceptors[i];\n      let res = interceptor(options);\n\n      if (res !== null && (typeof res !== 'undefined')) {\n        return res;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * @return {Promise} Returns either the underlying HTTP request result, or the promise returned by the interceptor if any\n   */\n  protected responseGet(requestUri: string, promise: Promise<HttpResponse>): Promise<HttpResponse> {\n    //Execute response interceptors\n\n    for (let interceptor of this._getResponseInterceptors) {\n      let res = interceptor(requestUri, promise);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    return promise;\n  }\n\n  /**\n   * @return {Promise} Returns either the underlying HTTP request result, or the promise returned by the interceptor if any\n   */\n  protected responsePost(requestUri: string, promise: Promise<HttpResponse>): Promise<HttpResponse> {\n    //Execute response interceptors\n    for (let interceptor of this._postResponseInterceptors) {\n      let res = interceptor(requestUri, promise);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    return promise;\n  }\n\n  /**\n   * @param {array|string} type - HTTP verb of the request to intercept\n   * @param {function} callback - The interceptor function to execute before HTTP request. If it returns something different than null, the underlying HTTP request won't be executed\n   * @returns {null|object} Returns null or an object, if an object is returned, the underlying HTTP request won't be executed\n   */\n  public registerRequestInterceptor(type: string|string[], callback: RequestInterceptor<IRequestOption>) {\n\n    let interceptorType = this._interceptorTypeToArray(type);\n\n    interceptorType.forEach(t => {\n      if (t === 'get') {\n        this._getRequestInterceptors.push(callback);\n      }\n      else if (t === 'post') {\n        this._postRequestInterceptors.push(callback);\n      }\n    });\n  }\n\n  public registerResponseInterceptor(type: string|string[], callback: ResponseInterceptor) {\n\n    let interceptorType = this._interceptorTypeToArray(type);\n\n    interceptorType.forEach(t => {\n      if (t === 'get') {\n        this._getResponseInterceptors.push(callback);\n      }\n      else if (t === 'post') {\n        this._postResponseInterceptors.push(callback);\n      }\n    });\n  }\n\n  private _interceptorTypeToArray(type: string|string[]): string[] {\n    let interceptorType: string[] = [];\n\n    if (typeof type === 'string') {\n      if (!this._isValidInterceptorType(type.toLowerCase())) {\n        throw new Error('HttpClient.registerInterceptor: invalid interceptor type');\n      }\n      else {\n        interceptorType.push(type.toLowerCase());\n      }\n    }\n    else if (Array.isArray(type)) {\n      type.forEach(t => {\n        if (!this._isValidInterceptorType(t.toLowerCase())) {\n          throw new Error('HttpClient.registerInterceptor: invalid interceptor type');\n        }\n        else {\n          interceptorType.push(t.toLowerCase());\n        }\n      });\n    }\n    else {\n      throw new Error('HttpClient.registerInterceptor: type must be a string or an array');\n    }\n\n    return interceptorType;\n  }\n\n  private _isValidInterceptorType(type: string): boolean {\n    let validTypes = ['get', 'post'];\n\n    return validTypes.indexOf(type) !== -1;\n  }\n}\n\nexport default HttpClient;\n","class HttpResponse {\n\n  public statusCode: number;\n  public headers: any[];\n  public body: string;\n\n  constructor({statusCode, headers, body}:\n    {statusCode: number, headers: any[], body: string}) {\n    this.statusCode = statusCode;\n    this.headers = headers || [];\n    this.body = body;\n  }\n}\n\nexport default HttpResponse;\n","const request: any = require('request');\n\nimport { HttpClient, IGetRequestOption, IPostRequestOption } from './http-client';\nimport HttpResponse from './http-response';\n\nclass NodeHttpClient extends HttpClient {\n\n  private request: any;\n  private cookieJar: any;\n\n  constructor({ apiPrefix }: { apiPrefix: string }) {\n    super({ apiPrefix });\n\n    this.request = request;\n    this.cookieJar = this.request.jar();\n  }\n\n  public _clearCookie(): void {\n    this.cookieJar = this.request.jar();\n  }\n\n  public get({ uri, params }: IGetRequestOption): Promise<HttpResponse> {\n    try {\n      let res = super.get({ uri, params });\n      if (res !== null) {\n        return Promise.resolve(res);\n      }\n    }\n    catch (e) {\n      return <any>Promise.reject(e);\n    }\n\n    let result = this._getWithoutInterceptor({ uri, params });\n    return super.responseGet(uri, result);\n  }\n\n  private _getWithoutInterceptor({ uri, params }: IGetRequestOption): Promise<HttpResponse> {\n    let options = {\n      url: this.prefix + uri,\n      method: 'GET',\n      qs: params,\n      jar: this.cookieJar\n    };\n\n    return this._httpResponseAdaptor({ requestOptions: options });\n  }\n\n  public post({ uri, data, binary }: IPostRequestOption): Promise<HttpResponse> {\n    try {\n      let res = super.post({ uri, data, binary });\n      if (res !== null) {\n        return Promise.resolve(res);\n      }\n    }\n    catch (e) {\n      return <any>Promise.reject(e);\n    }\n\n    let options: any = {\n      url: this.prefix + uri,\n      method: 'POST',\n      jar: this.cookieJar\n    };\n\n    options[binary ? 'body' : 'form'] = data;\n\n    try {\n      if (binary) {\n        options.headers = {\n          'Content-Type': 'application/octet-stream'\n        };\n      } else {\n        options.headers = {\n          'Content-Type': 'application/json'\n        };\n        options.form = JSON.stringify(data);\n      }\n    }\n    catch (e) {\n      return <any>Promise.reject(e);\n    }\n\n    let result = this._httpResponseAdaptor({ requestOptions: options });\n    return super.responsePost(uri, result);\n  }\n\n  private _httpResponseAdaptor({ requestOptions }: any): Promise<HttpResponse> {\n    return new Promise((resolve, reject) => {\n      this.request(requestOptions, (error: any, response: any, body: string) => {\n        if (error || response.statusCode >= 400) {\n          reject(error || { statusMessage: response.statusMessage, body: body });\n        }\n        else {\n          resolve(new HttpResponse({\n            statusCode: response.statusCode,\n            headers: [],\n            body\n          }));\n        }\n      });\n    });\n  }\n}\n\nexport default NodeHttpClient;\n","import WakandaClient from '../../wakanda-client';\nimport HttpClient from '../http/http-client';\n\nabstract class AbstractService {\n\n  protected httpClient: HttpClient;\n  protected wakJSC: WakandaClient;\n\n  constructor({wakJSC}: {wakJSC: WakandaClient}) {\n    this.wakJSC = wakJSC;\n    this.httpClient = wakJSC._httpClient;\n  }\n}\n\nexport default AbstractService;\n","import HttpClient from '../../http/http-client';\nimport {IDataClassDBO} from '../../../business/catalog-business';\n\nexport class CatalogBaseService {\n\n  public static get({httpClient, dataClasses, catalog}: {httpClient: HttpClient, dataClasses?: string|string[], catalog: string}) {\n    let strDataclasses = '/';\n\n    if (Array.isArray(dataClasses)) {\n      strDataclasses += dataClasses.join();\n    }\n    else if (typeof dataClasses === 'undefined') {\n      strDataclasses += '$all';\n    }\n    else {\n      throw new Error('Catalog.get: first parameter should be an array');\n    }\n\n    let strCatalog = catalog ? '/' + catalog : '';\n\n    return httpClient.get({uri: '/rest/$catalog' + strCatalog + strDataclasses})\n      .then(res => {\n        let catalogContent: IDataClassDBO[] = [];\n        let rawObj = JSON.parse(res.body);\n\n        if (rawObj.dataClasses) {\n          for (let d of rawObj.dataClasses) {\n\n            let attributes: any[] = [];\n            if (d.attributes) { //Seriously? :)\n              for (let attr of d.attributes) {\n                attributes.push({\n                  name: attr.name,\n                  kind: attr.kind,\n                  type: attr.type,\n                  readOnly: attr.readOnly,\n                  simpleDate: attr.simpleDate === undefined ? undefined : attr.simpleDate\n                });\n              }\n            }\n\n            let methods: any[] = [];\n            if (d.methods) {\n              for (let m of d.methods) {\n                methods.push({\n                  name: m.name,\n                  applyTo: m.applyTo\n                });\n              }\n            }\n\n            catalogContent.push({\n              name: d.name,\n              collectionName: d.collectionName,\n              attributes,\n              methods,\n              dataURI: d.dataURI\n            });\n          }\n        }\n\n        return catalogContent;\n      });\n  }\n}\n","import HttpClient from '../../http/http-client';\nimport {QueryOption} from '../../../presentation/query-option';\nimport {ICollectionDBO} from '../../../business/collection-business';\nimport Util from '../../util';\n\nexport interface IBaseParams {\n  httpClient: HttpClient;\n  collectionUri: string;\n  isEntitySet: boolean;\n}\n\nexport interface IFetchParams extends IBaseParams {\n  options: QueryOption;\n}\n\nexport interface ICallMethodParams extends IBaseParams {\n  methodName: string;\n  parameters: any[];\n}\n\nexport class CollectionBaseService {\n\n  public static fetch({httpClient, collectionUri, isEntitySet, options}: IFetchParams) {\n\n    if (!isEntitySet) {\n      if (options.select && options.select.length > 0) {\n        throw new Error('Collection.fetch: option select is not allowed when collection is deferred');\n      }\n    }\n\n    options.method = 'subentityset';\n\n    let optString = Util.handleOptions(options);\n\n    //Remove the first ? on optString if it's not an entitySet (because there is also\n    //?$expand=... on collectionUri), and add a &\n    if (!isEntitySet) {\n      optString = '&' + optString.slice(1);\n    }\n\n    let uri = collectionUri;\n\n    return httpClient.get({\n      uri: uri + optString\n    }).then(res => {\n      let obj = JSON.parse(res.body);\n\n      delete obj.__entityModel;\n\n      for (let entity of obj.__ENTITIES) {\n        Util.removeRestInfoFromEntity(entity);\n      }\n\n      return obj as ICollectionDBO;\n    });\n  }\n\n  public static callMethod({httpClient, collectionUri, isEntitySet, methodName, parameters}: ICallMethodParams) {\n    let uri = collectionUri;\n\n    if (isEntitySet) {\n      uri += '/' + methodName;\n    }\n    else {\n      let optString = Util.handleOptions({\n        method: 'subentityset',\n        emMethod: methodName\n      });\n\n      uri += '&' + optString.slice(1);\n    }\n\n    return httpClient.post({\n        uri,\n        data: parameters\n      }).then((res: any) => {\n        let obj = JSON.parse(res.body);\n        return obj.result || obj || null;\n      });\n  }\n}\n\nexport function isEntitySetUri(uri: string): boolean {\n  return /^\\/rest\\/\\w+\\/\\$entityset\\/[A-Z0-9]+(\\?.*)?$/i.test(uri);\n}\n","import HttpClient from '../../http/http-client';\nimport {QueryOption} from '../../../presentation/query-option';\nimport {IEntityDBO} from '../../../business/entity-business';\nimport {ICollectionDBO} from '../../../business/collection-business';\nimport Util from '../../util';\n\nexport interface IFindParams {\n  httpClient: HttpClient;\n  key: number|string;\n  options: QueryOption;\n  dataURI: string;\n}\n\nexport interface IQueryParams {\n  httpClient: HttpClient;\n  options: QueryOption;\n  dataURI: string;\n}\n\nexport interface ICallMethodParams {\n  httpClient: HttpClient;\n  methodName: string;\n  parameters: any[];\n  dataURI: string;\n}\n\nexport class DataClassBaseService {\n\n  public static find({httpClient, key, options, dataURI}: IFindParams) {\n\n    if (typeof key !== 'string' && typeof key !== 'number') {\n      throw new Error('DataClass.find: Invalid id type');\n    }\n\n    let optString = Util.handleOptions(options);\n\n    return httpClient.get({\n      uri: dataURI + '(' + key + ')' + optString\n    })\n      .then(res => {\n        let entity = JSON.parse(res.body);\n        delete entity.__entityModel;\n\n        Util.removeRestInfoFromEntity(entity);\n\n        return entity as IEntityDBO;\n      });\n  }\n\n  public static query({httpClient, options, dataURI}: IQueryParams) {\n\n    options.method = 'entityset';\n\n    if (Array.isArray(options.params)) {\n      options.params = this._sanitizeOptionParams(options.params);\n    }\n\n    let optString = Util.handleOptions(options);\n\n    return httpClient.get({\n      uri: dataURI + optString\n    }).then(res => {\n      let collection = JSON.parse(res.body);\n      delete collection.__entityModel;\n\n      for (let entity of collection.__ENTITIES) {\n        Util.removeRestInfoFromEntity(entity);\n      }\n\n      return collection as ICollectionDBO;\n    });\n  }\n\n  public static callMethod({httpClient, methodName, parameters, dataURI}: ICallMethodParams) {\n\n    return httpClient.post({\n      uri: dataURI + '/' + methodName,\n      data: parameters\n    }).then(res => {\n      let obj = JSON.parse(res.body);\n      return obj.result || obj || null;\n    });\n  }\n\n  private static _sanitizeOptionParams(params: any[]): any[] {\n    return params.map(element => {\n      if (element instanceof Date) {\n        return element.toISOString();\n      }\n      else {\n        return element;\n      }\n    });\n  }\n}\n","import HttpClient from '../../http/http-client';\nimport {ICurrentUserDBO} from '../../../business/directory-business';\n\nexport interface ILoginParams {\n  httpClient: HttpClient;\n  username: string;\n  password: string;\n  duration: number;\n}\n\nexport interface ICurrentUserBelongsToParams {\n  httpClient: HttpClient;\n  group: string;\n}\n\nexport class DirectoryBaseService {\n\n  public static login({httpClient, username, password, duration}:\n  {httpClient: HttpClient, username: string, password: string, duration?: number}): Promise<boolean> {\n\n    return httpClient.post({\n      uri: '/rest/$directory/login',\n      data: [username, password, duration]\n    }).then(() => {\n        return true;\n      });\n  }\n\n  public static logout({httpClient}: {httpClient: HttpClient}): Promise<boolean> {\n    return httpClient.get({\n      uri: '/rest/$directory/logout'\n    }).then(res => {\n      let obj = JSON.parse(res.body);\n      if (obj.result && obj.result === true) {\n        return true;\n      }\n      else {\n        return <any>Promise.reject(new Error());\n      }\n    });\n  }\n\n  public static getCurrentUser({httpClient}: {httpClient: HttpClient}): Promise<ICurrentUserDBO> {\n    return httpClient.get({\n      uri: '/rest/$directory/currentUser'\n    })\n      .then(res => {\n        let obj = JSON.parse(res.body);\n\n        if (obj.result && obj.result.ID) {\n          return obj.result;\n        }\n        else {\n          return Promise.reject(new Error());\n        }\n      });\n  }\n\n  public static getCurrentUserBelongsTo({httpClient, group}: ICurrentUserBelongsToParams): Promise<boolean> {\n    return httpClient.post({\n      uri: '/rest/$directory/currentUserBelongsTo',\n      data: [group]\n    }).then(res => {\n      let obj = JSON.parse(res.body);\n\n      if (obj && obj.result && obj.result === true) {\n        return true;\n      }\n      else {\n        return <any>Promise.reject(new Error());\n      }\n    });\n  }\n}\n","import HttpClient from '../../http/http-client';\nimport {IEntityDBO} from '../../../business/entity-business';\nimport Util from '../../util';\n\nexport interface ISaveParams {\n  httpClient: HttpClient;\n  data: IEntityDBO;\n  expand: string;\n  dataURI: string;\n}\n\nexport interface IRecomputeParams {\n  httpClient: HttpClient;\n  data: IEntityDBO;\n  dataURI: string;\n}\n\nexport interface ICallMethodParams {\n  httpClient: HttpClient;\n  dataURI: string;\n  methodName: string;\n  parameters: any[];\n  entityKey: string;\n}\n\nexport interface IDeleteParams {\n  httpClient: HttpClient;\n  entityKey: string;\n  dataURI: string;\n}\n\nexport class EntityBaseService {\n\n  public static save({httpClient, data, expand, dataURI}: ISaveParams) {\n\n    let expandStr = '';\n    if (expand) {\n      expandStr = '&$expand=' + expand;\n    }\n\n    return httpClient.post({\n      uri: dataURI + '?$method=update' + expandStr,\n      data\n    }).then(res => {\n      let entity = JSON.parse(res.body);\n      delete entity.__entityModel;\n      Util.removeRestInfoFromEntity(entity);\n\n      return entity as IEntityDBO;\n    });\n  }\n\n  public static recompute({httpClient, dataURI, data}: IRecomputeParams) {\n\n    return httpClient.post({\n      uri: dataURI + '?$method=update&$refresh=true',\n      data\n    }).then(res => {\n      let dbo = JSON.parse(res.body);\n      delete dbo.__entityModel;\n      Util.removeRestInfoFromEntity(dbo);\n\n      return dbo as IEntityDBO;\n    });\n  }\n\n  public static callMethod({httpClient, dataURI, methodName, parameters, entityKey}: ICallMethodParams) {\n\n    return httpClient.post({\n      uri: dataURI + '(' + entityKey + ')/' + methodName,\n      data: parameters\n    }).then(res => {\n      let obj = JSON.parse(res.body);\n      return obj.result || obj || null;\n    });\n  }\n\n  public static delete({httpClient, dataURI, entityKey}: IDeleteParams): Promise<boolean> {\n\n    return httpClient.post({\n      uri: dataURI + '(' + entityKey + ')?$method=delete'\n    }).then(res => {\n      let obj = JSON.parse(res.body);\n\n      if (!(obj && obj.ok === true)) {\n        return <any>Promise.reject(new Error());\n      }\n      else {\n        return true;\n      }\n    });\n  }\n}\n","import HttpClient from '../../http/http-client';\nimport HttpResponse from '../../http/http-response';\n\nexport interface IUploadParams {\n  httpClient: HttpClient;\n  dataURI: string;\n  entityKey: string;\n  attributeName: string;\n  file: File;\n  isImage: boolean;\n}\n\nexport interface IDeleteParams {\n  httpClient: HttpClient;\n  dataURI: string;\n  entityKey: string;\n  entityStamp: number;\n  attributeName: string;\n}\n\nexport class MediaBaseService {\n\n  public static upload({httpClient, dataURI, entityKey, attributeName, file, isImage}: IUploadParams): Promise<HttpResponse> {\n\n    let uri = this._buildUri(dataURI, entityKey, attributeName);\n\n    if (isImage) {\n      uri += '?$rawPict=' + file.type;\n    }\n\n    //FIXME - real crappy not to return some piece of information to refresh entity\n    return httpClient.post({\n      uri,\n      data: file,\n      binary: true\n    });\n  }\n\n  public static delete({httpClient, dataURI, entityKey, entityStamp, attributeName}: IDeleteParams): Promise<HttpResponse> {\n    let uri = dataURI + '(' + entityKey + ')';\n    let data: any = {\n      __KEY: entityKey,\n      __STAMP: entityStamp\n    };\n\n    data[attributeName] = null;\n\n    //FIXME - crappy\n    return httpClient.post({\n      uri,\n      data\n    });\n  }\n\n  private static _buildUri(dataURI: string, entityKey: string, attributeName: string): string {\n    return dataURI + '(' + entityKey + ')' + '/' + attributeName;\n  }\n}\n","import AbstractService from './abstract-service';\nimport {IDataClassDBO} from '../../business/catalog-business';\nimport {CatalogBaseService} from './base/catalog-base-service';\n\nclass CatalogService extends AbstractService {\n\n  public get(dataClasses?: string| string[]): Promise<IDataClassDBO[]> {\n    return CatalogBaseService.get({\n      httpClient: this.httpClient,\n      dataClasses,\n      catalog: this.wakJSC.catalog\n    });\n  }\n}\n\nexport default CatalogService;\n","import AbstractService from './abstract-service';\nimport Collection from '../../presentation/collection';\nimport DataClassBusiness from '../../business/dataclass-business';\nimport {QueryOption} from '../../presentation/query-option';\nimport {ICollectionDBO} from '../../business/collection-business';\nimport {CollectionBaseService, isEntitySetUri} from './base/collection-base-service';\nimport WakandaClient from '../../wakanda-client';\n\nclass CollectionService extends AbstractService {\n\n  private collection: Collection;\n  private dataClassBusiness: DataClassBusiness;\n  private collectionUri: string;\n  private isEntitySet: boolean;\n\n  constructor({wakJSC, collection, dataClassBusiness, collectionUri}:\n    {wakJSC: WakandaClient, collection: Collection, dataClassBusiness: DataClassBusiness, collectionUri: string}) {\n    super({wakJSC});\n\n    this.collection = collection;\n    this.dataClassBusiness = dataClassBusiness;\n    this.collectionUri = collectionUri;\n    this.isEntitySet = isEntitySetUri(collectionUri);\n  }\n\n  public fetch(options: QueryOption): Promise<ICollectionDBO> {\n\n    return CollectionBaseService.fetch({\n      httpClient: this.httpClient,\n      collectionUri: this.collectionUri,\n      isEntitySet: this.isEntitySet,\n      options\n    })\n      .then(dbo => {\n\n        if (dbo.__ENTITYSET) {\n          this.collectionUri = dbo.__ENTITYSET;\n          this.isEntitySet = isEntitySetUri(dbo.__ENTITYSET);\n        }\n\n        return dbo;\n      });\n  }\n\n\n  public callMethod(methodName: string, parameters: any[]): Promise<any> {\n    return CollectionBaseService.callMethod({\n      httpClient: this.httpClient,\n      collectionUri: this.collectionUri,\n      isEntitySet: this.isEntitySet,\n      methodName,\n      parameters\n    });\n  }\n}\n\nexport default CollectionService;\n","import AbstractService from './abstract-service';\nimport {QueryOption} from '../../presentation/query-option';\nimport DataClassBusiness from '../../business/dataclass-business';\nimport {IEntityDBO} from '../../business/entity-business';\nimport {ICollectionDBO} from '../../business/collection-business';\nimport {DataClassBaseService} from './base/dataclass-base-service';\nimport WakandaClient from '../../wakanda-client';\n\nclass DataClassService extends AbstractService {\n\n  private dataClassBusiness: DataClassBusiness;\n\n  constructor({wakJSC, dataClassBusiness}: {wakJSC: WakandaClient, dataClassBusiness: DataClassBusiness}) {\n    super({wakJSC});\n\n    this.dataClassBusiness = dataClassBusiness;\n  }\n\n  public find(id: string|number, options: QueryOption): Promise<IEntityDBO> {\n    return DataClassBaseService.find({\n      httpClient: this.httpClient,\n      key: id,\n      options,\n      dataURI: this.dataClassBusiness.dataURI\n    });\n  }\n\n  public query(options: QueryOption): Promise<ICollectionDBO> {\n    return DataClassBaseService.query({\n      httpClient: this.httpClient,\n      options,\n      dataURI: this.dataClassBusiness.dataURI\n    });\n  }\n\n  public callMethod(methodName: string, parameters: any[]): Promise<any> {\n    return DataClassBaseService.callMethod({\n      httpClient: this.httpClient,\n      dataURI: this.dataClassBusiness.dataURI,\n      methodName,\n      parameters\n    });\n  }\n}\n\nexport default DataClassService;\n","import AbstractService from './abstract-service';\nimport {ICurrentUserDBO} from '../../business/directory-business';\nimport {DirectoryBaseService} from './base/directory-base-service';\n\nclass DirectoryService extends AbstractService {\n\n  public login(username: string, password: string, duration: number): Promise<boolean> {\n    return DirectoryBaseService.login({\n      httpClient: this.httpClient,\n      username,\n      password,\n      duration\n    });\n  }\n\n  public logout(): Promise<boolean> {\n    return DirectoryBaseService.logout({\n      httpClient: this.httpClient\n    });\n  }\n\n  public getCurrentUser(): Promise<ICurrentUserDBO> {\n    return DirectoryBaseService.getCurrentUser({\n      httpClient: this.httpClient\n    });\n  }\n\n  public getCurrentUserBelongsTo(group: string): Promise<boolean> {\n    return DirectoryBaseService.getCurrentUserBelongsTo({\n      httpClient: this.httpClient,\n      group\n    });\n  }\n}\n\nexport default DirectoryService;\n","import AbstractService from './abstract-service';\nimport Entity from '../../presentation/entity';\nimport DataClassBusiness from '../../business/dataclass-business';\nimport {IEntityDBO} from '../../business/entity-business';\nimport {EntityBaseService} from './base/entity-base-service';\nimport WakandaClient from '../../wakanda-client';\n\nclass EntityService extends AbstractService {\n\n  private entity: Entity;\n  private dataClassBusiness: DataClassBusiness;\n\n  constructor({wakJSC, entity, dataClassBusiness}:\n  {wakJSC: WakandaClient, entity: Entity, dataClassBusiness: DataClassBusiness}) {\n    super({wakJSC});\n\n    this.entity = entity;\n    this.dataClassBusiness = dataClassBusiness;\n  }\n\n  public save(data: IEntityDBO, expand: string) {\n    return EntityBaseService.save({\n      httpClient: this.httpClient,\n      dataURI: this.dataClassBusiness.dataURI,\n      expand,\n      data\n    });\n  }\n\n  public recompute(data: IEntityDBO) {\n   return EntityBaseService.recompute({\n      httpClient: this.httpClient,\n      dataURI: this.dataClassBusiness.dataURI,\n      data\n    });\n  }\n\n  public callMethod(methodName: string, parameters: any[]) {\n    return EntityBaseService.callMethod({\n      httpClient: this.httpClient,\n      dataURI: this.dataClassBusiness.dataURI,\n      methodName,\n      parameters,\n      entityKey: this.entity._key\n    });\n  }\n\n  public delete() {\n    return EntityBaseService.delete({\n      httpClient: this.httpClient,\n      dataURI: this.dataClassBusiness.dataURI,\n      entityKey: this.entity._key\n    });\n  }\n}\n\nexport default EntityService;\n","import WakandaClient from '../../wakanda-client';\nimport AbstractService from './abstract-service';\nimport Entity from '../../presentation/entity';\nimport Media from '../../presentation/media';\nimport HttpResponse from '../http/http-response';\nimport {MediaBaseService} from './base/media-base-service';\nimport MediaBusiness from '../../business/media-business';\nimport DataClassBusiness from '../../business/dataclass-business';\n\nclass MediaService extends AbstractService {\n\n  private dataClassName: string;\n  private entity: Entity;\n  private isImage: boolean;\n  private media: Media;\n  private attributeName: string;\n  private dataURI: string;\n\n  constructor({wakJSC, mediaBusiness, media, attributeName, dataClassBusiness}:\n    {wakJSC: WakandaClient, mediaBusiness: MediaBusiness, media: Media, attributeName: string, dataClassBusiness: DataClassBusiness}) {\n\n    super({wakJSC});\n\n    this.dataClassName = dataClassBusiness.dataClass.name;\n    this.dataURI = dataClassBusiness.dataURI;\n    this.entity = mediaBusiness.entity;\n    this.isImage = mediaBusiness.isImage;\n    this.media = media;\n    this.attributeName = attributeName;\n  }\n\n  public upload(file: any, mimeType: string): Promise<HttpResponse> {\n    return MediaBaseService.upload({\n      httpClient: this.httpClient,\n      dataURI: this.dataURI,\n      entityKey: this.entity._key,\n      attributeName: this.attributeName,\n      isImage: this.isImage,\n      file\n    });\n  }\n\n  public delete(): Promise<HttpResponse> {\n    return MediaBaseService.delete({\n      httpClient: this.httpClient,\n      dataURI: this.dataURI,\n      entityKey: this.entity._key,\n      entityStamp: this.entity._stamp,\n      attributeName: this.attributeName\n    });\n  }\n}\n\nexport default MediaService;\n","import { QueryOption } from \"../presentation/query-option\";\n\nclass Util {\n  public static handleOptions(options: QueryOption) {\n    if (!options) {\n      return \"\";\n    }\n\n    let {\n      select,\n      filter,\n      params,\n      pageSize,\n      start,\n      orderBy,\n      method,\n      emMethod\n    } = options;\n\n    let ret = \"?\";\n\n    if (select) {\n      ret += \"&$expand=\" + select;\n    }\n\n    if (filter) {\n      ret += '&$filter=\"' + filter + '\"';\n    }\n\n    if (orderBy) {\n      ret += \"&$orderby=\" + orderBy;\n    }\n\n    if (params) {\n      if (!Array.isArray(params)) {\n        throw new Error(\"params option must be an array\");\n      }\n\n      if (params.length > 0) {\n        let p = \"[\";\n\n        for (let elt of params) {\n          if (typeof elt === \"string\") {\n            p += '\"' + elt + '\",';\n          } else {\n            p += (typeof elt === \"string\" ? elt : JSON.stringify(elt)) + \",\";\n          }\n        }\n\n        p = p.slice(0, -1);\n        p += \"]\";\n        ret += \"&$params='\" + p + \"'\";\n      }\n    }\n\n    if (pageSize) {\n      if (!this.isInteger(pageSize)) {\n        throw new Error(\"pageSize option must be an integer\");\n      }\n\n      ret += \"&$limit=\" + pageSize;\n    }\n\n    if (start) {\n      if (!this.isInteger(start)) {\n        throw new Error(\"start option must be an integer\");\n      }\n\n      ret += \"&$skip=\" + start;\n    }\n\n    if (method) {\n      ret += \"&$method=\" + method;\n    }\n\n    if (emMethod) {\n      ret += \"&$emMethod=\" + emMethod;\n    }\n\n    if (ret.length > 1 && ret[1] === \"&\") {\n      ret = ret.replace(\"?&\", \"?\");\n    }\n\n    return ret === \"?\" ? \"\" : ret;\n  }\n\n  public static isInteger(n: any): boolean {\n    return typeof n === \"number\" && !isNaN(n) && n % 1 === 0;\n  }\n\n  public static removeRestInfoFromEntity(entity: any): void {\n    for (let prop in entity) {\n      if (Object.prototype.hasOwnProperty.call(entity, prop)) {\n        let p = entity[prop];\n        if (p && p.__deferred && p.__deferred.__KEY) {\n          //Do not remove uri for collection\n          delete p.__deferred.uri;\n        }\n      }\n    }\n  }\n}\n\nexport default Util;\n","import WakandaClient from './wakanda-client';\nimport NodeHttpClient from './data-access/http/node-http-client';\n\nimport {CatalogBaseService} from './data-access/service/base/catalog-base-service';\nimport {CollectionBaseService} from './data-access/service/base/collection-base-service';\nimport {DataClassBaseService} from './data-access/service/base/dataclass-base-service';\nimport {DirectoryBaseService} from './data-access/service/base/directory-base-service';\nimport {EntityBaseService} from './data-access/service/base/entity-base-service';\nimport {MediaBaseService} from './data-access/service/base/media-base-service';\n\nWakandaClient.HttpClient = NodeHttpClient;\n\nexport {\n  WakandaClient,\n  CatalogBaseService,\n  CollectionBaseService,\n  DataClassBaseService,\n  DirectoryBaseService,\n  EntityBaseService,\n  MediaBaseService\n}; \n","import {DataClass} from './dataclass';\n\nclass Catalog {\n\n  [key: string]: DataClass;\n\n  constructor({dataClasses}: {dataClasses: DataClass[]}) {\n    for (let dc of dataClasses) {\n      this[dc.name] = dc;\n    }\n  }\n}\n\nexport default Catalog;\n","import Entity from './entity';\nimport {DataClass} from './dataclass';\nimport {QueryOption} from './query-option';\n\nclass Collection {\n\n  public entities: Entity[];\n  public _deferred: boolean;\n  public _count: number;\n  public _first: number;\n  public _sent: number;\n  public _pageSize: number;\n\n  [key: string]: any;\n\n  /* tslint:disable */\n  private _dataClass: DataClass;\n  /* tslint:enable */\n\n  public fetch: (options?: QueryOption) => Promise<Collection>;\n  public nextPage: () => Promise<Collection>;\n  public prevPage: () => Promise<Collection>;\n  public more: () => Promise<Collection>;\n\n  constructor({deferred, dataClass}: {deferred: boolean, dataClass: DataClass}) {\n    this.entities = [];\n    this._deferred = deferred === true;\n\n    Object.defineProperty(this, '_dataClass', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: dataClass\n    });\n  }\n}\nexport default Collection;\n","import Entity from './entity';\nimport Collection from './collection';\nimport {QueryOption} from './query-option';\n\nexport class DataClass {\n\n  public name: string;\n  public collectionName: string;\n  public attributes: Attribute[];\n  public methods: {\n    entity: string[],\n    collection: string[],\n    dataClass: string[]\n  };\n\n  public find: (id: string|number, options?: QueryOption) => Promise<Entity>;\n  public query: (options?: QueryOption) => Promise<Collection>;\n  public create: (pojo?: any) => Entity;\n\n  [key: string]: any;\n\n  constructor({name, collectionName, attributes, methods}:\n    {\n      name: string,\n      collectionName: string,\n      attributes: Attribute[],\n      methods: {entity: string[], collection: string[], dataClass: string[]}\n    }) {\n\n    this.name = name;\n    this.collectionName = collectionName;\n    this.attributes = attributes;\n    this.methods = methods;\n  }\n}\n\nexport class Attribute {\n\n  public name: string;\n  public type: string;\n  public readOnly: boolean;\n  public kind: string;\n  public simpleDate: boolean;\n\n  constructor({name, type, readOnly, kind, simpleDate}:\n   {name: string, type: string, readOnly?: boolean, kind: string, simpleDate?: boolean}) {\n\n    this.name = name;\n    this.type = type;\n    this.readOnly = readOnly === true;\n    this.kind = kind;\n    this.simpleDate = simpleDate;\n  }\n}\n\nexport class AttributeRelated extends Attribute {\n\n}\n\nexport class AttributeCollection extends Attribute {\n\n  public entityType: string;\n\n  constructor({name, type, readOnly, kind, entityType}:\n    {name: string, type: string, readOnly?: boolean, kind: string, entityType: string}) {\n\n    super({name, type, readOnly, kind});\n    this.entityType = entityType;\n  }\n}\n","import {DataClass} from './dataclass';\nimport {QueryOption} from './query-option';\n\nclass Entity {\n\n  public _key: string;\n  public _stamp: number;\n  public _deferred: boolean;\n  public _dataClass: DataClass;\n\n  [key: string]: any;\n\n  public save: () => Promise<Entity>;\n  public delete: () => Promise<void>;\n  public fetch: (options?: QueryOption) => Promise<Entity>;\n  public recompute: () => Promise<Entity>;\n\n  constructor({key: entityKey, deferred, dataClass}:\n   {key: string, deferred: boolean, dataClass: DataClass}) {\n\n    this._key = entityKey;\n    this._deferred = deferred === true;\n\n    Object.defineProperty(this, '_dataClass', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: dataClass\n    });\n  }\n}\n\nexport default Entity;\n","import Entity from './entity';\n\nclass Media {\n\n  public uri: string;\n\n  public upload: (file: any, mimeType?: string) => Promise<Entity>;\n  public delete: () => Promise<Entity>;\n\n  constructor({uri}: {uri: string}) {\n    this.uri = uri;\n  }\n}\n\nexport default Media;\n","import CatalogBusiness from './business/catalog-business';\nimport DirectoryBusiness from './business/directory-business';\nimport Entity from './presentation/entity';\nimport Collection from './presentation/collection';\nimport HttpClient from './data-access/http/http-client';\nimport Catalog from './presentation/catalog';\nimport BrowserHttpClient from './data-access/http/browser-http-client';\nimport NodeHttpClient from './data-access/http/node-http-client';\n\nconst packageOptions: any = require('../package.json');\n\nexport interface IDirectory {\n  login(username: string, password: string, duration?: number): Promise<boolean>;\n  logout(): Promise<boolean>;\n  getCurrentUser(): Promise<any>;\n  getCurrentUserBelongsTo(groupName: string): Promise<boolean>;\n}\n\nexport interface IHelper {\n  isEntity(object: any): boolean;\n  isCollection(object: any): boolean;\n}\n\nclass WakandaClient {\n\n  public static HttpClient: typeof BrowserHttpClient|typeof NodeHttpClient;\n\n  public _httpClient: HttpClient;\n  public directory: IDirectory;\n  public helper: IHelper;\n  public catalog: string;\n\n  constructor(params: {host?: string, catalog?: string}|any) {\n    let host = typeof(params) === 'object' ? params.host : undefined;\n    let catalog = typeof(params) === 'object' ? params.catalog : undefined;\n\n    this._httpClient = new WakandaClient.HttpClient({\n      apiPrefix: (host || '')\n    });\n\n    this.catalog = catalog;\n\n    let directoryBusiness = new DirectoryBusiness({\n      wakJSC: this\n    });\n\n    this.directory = {\n      login: (username, password, duration) => {\n        return directoryBusiness.login(username, password, duration);\n      },\n      logout: () => {\n        return directoryBusiness.logout();\n      },\n      getCurrentUser: () => {\n        return directoryBusiness.getCurrentUser();\n      },\n      getCurrentUserBelongsTo: (group) => {\n        return directoryBusiness.getCurrentUserBelongsTo(group);\n      }\n    };\n\n    this.helper = {\n      isEntity: object => {\n        return object instanceof Entity;\n      },\n      isCollection: object => {\n        return object instanceof Collection;\n      }\n    };\n  }\n\n  public getCatalog(dataClasses?: string[]): Promise<Catalog> {\n    let catalogBusiness = new CatalogBusiness({\n      wakJSC: this\n    });\n\n    return catalogBusiness.get(dataClasses);\n  }\n\n  public version(): string {\n    return packageOptions.version;\n  }\n}\n\nexport default WakandaClient;\n","module.exports = require(\"request\");"],"sourceRoot":""}